Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/MindBlob"
	IconNameKey = "Parts/MindBlobIcon"
	ID = wer24.MindBlob // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Production"
	DescriptionKey = "Parts/MindBlob"
	Resources
	[
	
		[steel, 50]
		[coil, 10]
	
		
	]
	Size = [8, 8]
	IsFlippable = true
	SelectionPriority = 1
	MaxHealth = 24000
	TypeCategories = [provides_steel, uses_iron, uses_power]
	DamageFromBrain = { BaseValue=0; BuffType=OverMindKiller; BuffMode=Add; }
	ReceivableBuffs : ^/0/ReceivableBuffs [OverMindKiller]
	
	//Prohibt left in but unused, unsure whcih one is less FPS heavy, prohibit or buff
	//ProhibitedBy : ^/0/ProhibitedBy [OverMind]
	//Prohibits
	//[

		//left
		//[OverMind, [0, 8, 100, 100]]
		//Front
		//[OverMind, [-9, 0, 1, 2]]
		//Right
		//[OverMind, [9, 0, 1, 3]]
		//Rear
		//[OverMind, [0, 0, 1, 4]]

	//]
	AllowedDoorLocations
	[
		[-1, 2]
		[-1, 5]
		[8, 2]
		[8, 5]
		[2, 8]
		[5, 8]
		[5, -1]
		[2, -1]
	]
	EditorIcon
	{
		Texture
		{
			File = "Alien Overmindmed256.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		
		
		

	HealOverTimeTimer
		{
			OperationalToggle = IsOperational
			Type = Timer
			Duration = 1
			TriggerWhenOn = true
			TriggerWhenOff = false
			AutoStart = true
			Repeats = true
		}
		HealingFromTimer
		{
		
		Type = TriggeredEffects
            Trigger = HealOverTimeTimer
            MediaEffects [   ]
            HitEffects 
            [
                {
                    Type = Damage
                    Damage = &~/Part/DamageFromBrain
                    Filter
                    {
                      Friendlies = true
                      IgnoreInvulnerability = true
					}
				}
			]
			
		}
		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		IronStorage
		{
			Type = TypedResourceGrid
			ResourceType = Flesh
			GridRect = [2, 5, 1, 1]
			Layer = "doodads_low"
			SpriteInset = [8/64, 6/64, 2/64, 9/64]
			RandomSpriteRotation = true
		}
		IronConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = Flesh
			Storage = IronStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}

		SteelStorage
		{
			Type = TypedResourceGrid
			ResourceType = BioMass
			GridRect = [5, 5, 2, 2]
			Layer = "doodads_low"
			SpriteInset = [2/64, 6/64, 8/64, 9/64]
			SuppliesResources = true
			SupplyToggleButtonOffset = [0, -.4]
			RandomSpriteRotation = true
			InitToMaxResources = 0
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = Flesh
			MaxResources = 10
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = Flesh
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 2
			OperationalToggle = PowerToggle
		}

		ResourceConverter
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			From
			[
			    {
			        Storage = IronStorage
			        Quantity = 1
			    }
			    {
			        Storage = BatteryStorage
			        Quantity = 1
			        MinQuantityForConversion = 1
			    }
			]
			ToStorage = SteelStorage
			ToQuantity = 10
			Interval = 1
			//{ BaseValue=1; BuffType=OverMind; BuffMode=Divide; }
		}

		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = ResourceConverter
			Location = [2, 2]
			MediaEffects
			[
				
			]
		}

		KillerBuffProvider
		{
			Type = GridBuffProvider
			BuffType = OverMindKiller
			BuffAmount = 10000
			GridDistance = 1000
			OperationalToggle = IsOperational
		}
		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = OverMind
			BuffAmount = 50
			GridDistance = 1000
			OperationalToggle = IsOperational
		}

		FloorSprite
		{
			Type = Sprite
			OnlyWithFlip = false
			Location = [4, 4]
			Layer = "floors"
			DamageLevels
			[
				{
					AnimationFiles
						[
							"Alien Overmindmed256v2anim1.png"
							"Alien Overmindmed256v2anim2.png"
							"Alien Overmindmed256v2anim3.png"
							"Alien Overmindmed256v2anim4.png"
							"Alien Overmindmed256v2anim5.png"
							"Alien Overmindmed256v2anim6.png"
							"Alien Overmindmed256v2anim7.png"
							"Alien Overmindmed256v2anim8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.125
				}
				{
					AnimationFiles
						[
							"Alien Overmindmed256v2anim1.png"
							"Alien Overmindmed256v2anim2.png"
							"Alien Overmindmed256v2anim3.png"
							"Alien Overmindmed256v2anim4.png"
							"Alien Overmindmed256v2anim5.png"
							"Alien Overmindmed256v2anim6.png"
							"Alien Overmindmed256v2anim7.png"
							"Alien Overmindmed256v2anim8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.125
				}
				{
					FAnimationFiles
						[
							"Alien Overmindmed256v2anim1.png"
							"Alien Overmindmed256v2anim2.png"
							"Alien Overmindmed256v2anim3.png"
							"Alien Overmindmed256v2anim4.png"
							"Alien Overmindmed256v2anim5.png"
							"Alien Overmindmed256v2anim6.png"
							"Alien Overmindmed256v2anim7.png"
							"Alien Overmindmed256v2anim8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.125
				}
			]
		}

		FloorSpriteFlipped
		{
			Type = Sprite
			OnlyWithFlip = true
			Location = [4, 4]
			Layer = "floors"
			DamageLevels
			[
				{
					AnimationFiles
						[
							"Alien Overmindmed256v2anim1.png"
							"Alien Overmindmed256v2anim2.png"
							"Alien Overmindmed256v2anim3.png"
							"Alien Overmindmed256v2anim4.png"
							"Alien Overmindmed256v2anim5.png"
							"Alien Overmindmed256v2anim6.png"
							"Alien Overmindmed256v2anim7.png"
							"Alien Overmindmed256v2anim8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.125
				}
				{
					AnimationFiles
						[
							"Alien Overmindmed256v2anim1.png"
							"Alien Overmindmed256v2anim2.png"
							"Alien Overmindmed256v2anim3.png"
							"Alien Overmindmed256v2anim4.png"
							"Alien Overmindmed256v2anim5.png"
							"Alien Overmindmed256v2anim6.png"
							"Alien Overmindmed256v2anim7.png"
							"Alien Overmindmed256v2anim8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.125
				}
				{
					AnimationFiles
						[
							"Alien Overmindmed256v2anim1.png"
							"Alien Overmindmed256v2anim2.png"
							"Alien Overmindmed256v2anim3.png"
							"Alien Overmindmed256v2anim4.png"
							"Alien Overmindmed256v2anim5.png"
							"Alien Overmindmed256v2anim6.png"
							"Alien Overmindmed256v2anim7.png"
							"Alien Overmindmed256v2anim8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.125
				}
			]
		}
		FloorSprite2
		{
			Type = Sprite
			OnlyWithFlip = false
			Location = [4, 4]
			Layer = "turrets"
			DamageLevels
			[
				{
					File ="AlienOvermindmedwalkway512.png"
					Size = [8, 8]
				}
				{
					File ="AlienOvermindmedwalkway512.png"
					Size = [8, 8]
				}
				{
					File ="AlienOvermindmedwalkway512.png"
					Size = [8, 8]
				}
			]
		}

		FloorSprite2Flipped
		{
			Type = Sprite
			OnlyWithFlip = true
			Location = [4, 4]
			Layer = "turrets"
			DamageLevels
			[
				{
					File ="AlienOvermindmedwalkway512.png"
					Size = [8, 8]
				}
				{
					File ="AlienOvermindmedwalkway512.png"
					Size = [8, 8]
				}
				{
					File = "AlienOvermindmedwalkway512.png"
					Size = [8, 8]
				}
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [4, 4]
			OperationalToggle = IsOperational
			DoodadToggle = ResourceConverter
			ToggleOnDoodad
			{
				Layer = "doodads_high"
				Offset = [0, -1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							
						]
						Size = [2, 2]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.125
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "doodads_high"
				Offset = [0, -1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.325
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.325
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.525
						AnimationStartTime = WhenSpawned
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.325
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.325
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
							"alien plasmasmall.png"
							"alien plasmasmall2.png"
							"alien plasmasmall2.png"
							"alien plasmasmall3.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.525
						AnimationStartTime = WhenSpawned
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [4, 4]
					}
					{
						File = "walls_33.png"
						Size = [4, 4]
					}
					{
						File = "walls_66.png"
						Size = [4, 4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [4, 4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "Alien OvermindmedRoof512.png"
						
						Size = [8, 8]
					}
					{
						File = "Alien OvermindmedRoof512.png"
						
						Size = [8, 8]
					}
					{
						File = "Alien OvermindmedRoof512.png"
						
						Size = [8, 8]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, 1.5]
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [4, 1]
					}
					{
						File = "roof_glows_33.png"
						Size = [4, 1]
					}
					{
						File = "roof_glows_66.png"
						Size = [4, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [-62/64, -57/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [5, 5]
						Z = .5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.4, 0, 0]
					}
				]
			}
		}

		Graphics2
		{
			Type = Graphics
			Location = [4, 4]
			OperationalToggle = IsOperational
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [62/64, -57/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [5, 5]
						Z = .5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.4, 0, 0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [84/64, 92/64]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
			]
		}
		

		OperationEffects
		{
			Type = ToggleEffects
			Location = [2, 2]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/HugePartDestroyed
			Location = [2, 2]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 2]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// No iron.
				{
					Toggle = IronStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			OnlyWithFlip = false
			File = "Alien Overmindmed256blueprint.png"
			Size = [4, 4]
		}

		BlueprintsFlipped
		{
			Type = BlueprintSprite
			OnlyWithFlip = true
			File = "Alien Overmindmed256blueprint.png"
			Size = [4, 4]
		}
	}

	Stats
	{
		//SteelProduction = (&~/Part/Components/ResourceConverter/ToQuantity) / 1
		//SteelCapacity = (&~/Part/Components/SteelStorage/GridRect/2) * (&~/Part/Components/SteelStorage/GridRect/3) * (&<./Data/resources/steel/steel.rules>/MaxStackSize)
		//IronCapacity = (&~/Part/Components/IronStorage/GridRect/2) * (&~/Part/Components/IronStorage/GridRect/3) * (&<./Data/resources/iron/iron.rules>/MaxStackSize)
		//IronPerSteel = (&~/Part/Components/ResourceConverter/From/0/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		//IronPerSecond = (&~/Part/Components/ResourceConverter/From/0/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		//SteelIronUsage = [&../IronPerSteel, &../IronPerSecond]
		//PowerPerSteel = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity) / 1000
		//PowerPerSecond = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue) / 1000
		//SteelPowerUsage = [&../PowerPerSteel, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		OverMindBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		//RecPower = &PowerPerSecond
		//RecCrew = (&RecPower) * 4
	}
}