Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/SwarmNest"
	IconNameKey = "Parts/SwarmNestIcon"
	ID = wer24.SwarmNest // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	//OtherIDs = [point_defense]
	EditorGroups = ["WeaponsEnergy", "Defenses"]
	DescriptionKey = "Parts/SwarmNestDesc"
	Resources
	[
		
		[steel, 6]
		[coil, 8]
		[BioMass, 30]
	
	]
	TypeCategories = [defense, uses_power]
	HealingFromBrain = { BaseValue=-2; BuffType=OverMind; BuffMode=Multiply; }
	ReceivableBuffs : ^/0/ReceivableBuffs [OverMind]
	Size = [2, 2]
	PhysicalRect = [0, 1, 2, 1]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 6000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 1
	AllowedDoorLocations
	[
		[-1,1]
		[1,2]
		
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [80, 80]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, BioMassStorage]
			Mode = All
		}
		
		IsBuffed
	{
	Type=BuffToggle
	BuffType= OverMind
	
	}
	
	HealthCheckToggle
	{
	Type= HealthToggle
	MinHealthFraction = 1%
    MaxHealthFraction = 99.99%
	
	}
	
		HealOverTimeTimer
		{
			OperationalToggle = IsOperational
			Type = Timer
			Duration = 1
			TriggerWhenOn = true
			TriggerWhenOff = false
			AutoStart = true
			Repeats = true
		}
		HealingFromTimer
		{
		
		Type = TriggeredEffects
            Trigger = HealOverTimeTimer
            MediaEffects [   ]
            HitEffects 
            [
                {
                    Type = Damage
                    Damage = &~/Part/HealingFromBrain
                    Filter
                    {
                      Friendlies = true
                      IgnoreInvulnerability = true
					}
				}
			]
			
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 5
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FirePrefToggle
		{
			Type = UIToggle
			ToggleID = "fire_pref"
			Default = 1
		}
		FirePrefAttack
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [0, 2]
		}
		FirePrefDefend
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [1, 2]
		}
		AttackToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefAttack]
			Mode = All
		}
		DefendToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefDefend]
			Mode = All
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BioMassStorage
		{
			Type = ResourceStorage
			ResourceType = BioMass
			MaxResources = 300
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			ResupplyThreshold = 1
			DefaultPriority = &/PRIORITIES/Defense_Supply
			OperationalToggle = PowerToggle
		}
		BioMassConsumer
		{
			Type = ResourceConsumer
			ResourceType = BioMass
			Storage = BioMassStorage
			ResupplyThreshold = 1
			DefaultPriority = &/PRIORITIES/Defense_Supply
			OperationalToggle = PowerToggle
		}

		TurretHolder
		{
			Type = Sprite
			Location = [1, 0]
			Layer = "weapons"
			AtlasSprite
			{
				File = "turret_holder.png"
				NormalsFile = "turret_holder_normals.png"
				Size = [1, 1]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [2, 2]
					}
					{
						File = "doodads.png"
						Size = [2, 2]
					}
					{
						File ="doodads.png"
						Size = [2, 2]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
				]
			}
			WallsStencil
			{
				Layer = "walls_stencil"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "stencil.png"
						Size = [2, 2]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [1, -0.4128]//Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 1/2
			FiringArc = 0d
			ValidArc = 360d;
			RotateSpeed = 1080d
			AllowFireWithBlockedLOS = true
			FireThresholdAngle = 180d
			AIFirepowerRating = 150
			CanBeGivenExplicitTarget = false
			Emitter = BulletEmitter
			TargetSearchesPerSecond = 4 // Default is 2.
			HoldTargetAfterCancel = .5
			TargetPathThickness = .2// &../BulletEmitter/Bullet/Components/Physics/Radius
			EstimateFirepowerToggle = AttackToggle
			AlwaysShowCoverage = true
			AllowDirectControl = false
			FirePermissionToggle = FireModeToggle
			AutoTargetCrewSafetyDist = 8

			AutoTargets
			[
				{
					TargetType = Bullets
					BulletTargetCategories = [missile, mine, bullet]
					Toggle = DefendToggle
				}
				{
				    TargetType = Crew
				    Toggle = AttackToggle
				}
				{
					TargetType = ShipParts
					Toggle = AttackToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = Turret
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [0, 0]
			OperationalToggle = IsOperational
			Bullet = &<Swarm/Swarmer.rules>
			Spread = [-10d, 10d]
			ResourceStorage = BatteryStorage 
			ResourcesUsed = 50
			MinResourcesUsed = 1
		}
		BulletEmitter2
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [0, 0]
			OperationalToggle = IsOperational
			Bullet = &<Swarm/Swarmer.rules>
			Spread = [-10d, 10d]
			ResourceStorage = BioMassStorage 
			ResourcesUsed = 5
			MinResourcesUsed = 1
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitter
			Trigger = BulletEmitter
			AnchorMediaEffects = true

			MediaEffects
			[
				//&<particles/point_defense_shoot.rules>
				//&<particles/point_defense_shoot_flash.rules>


				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shoot.wav"
					Volume = .25
					SpeedVariation = .25
				}
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "structure"
				DamageLevels
				[
					{
						File = "swarmspitter0v2.png"
						//NormalsFile = "turret_normals.png"
						Size = [2, 2]
					}
					{
						File = "swarmspitter0v2.png"
						//NormalsFile = "turret_normals.png"
						Size = [2, 2]
					}
					{
						File = "swarmspitter0v2.png"
					//	NormalsFile = "turret_normals.png"
						Size = [2, 2]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "structure"
				DamageLevels
				[
					{
						File = "swarmspitter0v2.png"
						//NormalsFile = "turret_normals.png"
						Size = [2, 2]
					}
					{
						File = "swarmspitter0v2.png"
						//NormalsFile = "turret_normals.png"
						Size = [2, 2]
					}
					{
						File = "swarmspitter0v2.png"
					//	NormalsFile = "turret_normals.png"
						Size = [2, 2]
					}
				]
			}
		}

		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			OperationalToggle = IsOperational
			Location = [0, 0]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = Turret
			AtlasSprite
			{
				AnimationFiles
				[
					"swarmspitter0v2.png"
					"swarmspitter1v2.png"
					"swarmspitter2v2.png"
					"swarmspitter3v2.png"
					"swarmspitter4v2.png"
					"swarmspitter5v2.png"// Loop back to beginning and clamp there.
				]
				Size = [2, 2]
				AnimationInterval = 0.05
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "battery1.png"
					Size = [1, 1]
				}
				{
					File = "battery2.png"
					Size = [1, 1]
				}
			]
		}
		BioMassSprites
		{
			Type = ResourceSprites
			Location = [1.5, 0.5]
			ResourceStorage = BioMassStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "BioMass.png"
					Size = [.5, .5]
				}
				{
					File = "BioMassStack.png"
					Size = [.5, .5]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&RecPower) * 4
		Healing = (&~/Part/HealingFromBrain/BaseValue)*-50
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/PDShot"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ShotDamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitBullet/HitEffects/0/Damage
				ShotDamagePerSecond = (&ShotDamagePerShot) * (&ROF)
				ShotDamage = [&../ShotDamagePerShot, &../ShotDamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BulletEmitter/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				Spread = deg(&~/Part/Components/BulletEmitter/Spread/1)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				PowerPerShot = (&~/Part/Components/BulletEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
				
			}
		}
	]
}